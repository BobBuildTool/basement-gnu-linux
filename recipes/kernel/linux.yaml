# Standard Linux kernel recipe that builds the kernel, modules and device
# trees. By default the defconfig of the architecture is built. Set the
# LINUX_CONFIG environment variable to use another ${LINUX_CONFIG}_defconfig.
# To use a custom defconfig create a package kernel::linux-custom-config and
# set LINUX_CUSTOM_CONFIG to the name of your custom defconfig file.

inherit: ["linux"]

depends:
    - if: "${LINUX_CUSTOM_CONFIG:-}"
      name: "${LINUX_CUSTOM_CONFIG_PKG:-kernel::linux-custom-config}"

metaEnvironment:
    PKG_VERSION: "6.6.17"

checkoutSCM:
    scm: url
    url: ${KERNEL_MIRROR}/linux/kernel/v6.x/linux-${PKG_VERSION}.tar.xz
    digestSHA256: "ee7650996ba75aa29fe66f309b413097f249a03e7001f2a41128c7c95205226a"
    stripComponents: 1
    dir: linux

buildVars: [LINUX_CONFIG, LINUX_CUSTOM_CONFIG, LINUX_CUSTOM_CONFIG_PKG]
buildScript: |
    # prevent timestamps in configuration
    export KCONFIG_NOTIMESTAMP=1
    export KBUILD_BUILD_TIMESTAMP='Mon Dec 28 22:49:40 CET 2015'

    # Use plain "defconfig" if we have no specific target. Otherwise check if
    # defconfig has changed.
    if [[ ${LINUX_CUSTOM_CONFIG:+true} ]] ; then
        PKG="${LINUX_CUSTOM_CONFIG_PKG:-kernel::linux-custom-config}"
        LCFG="${BOB_DEP_PATHS[$PKG]}/$LINUX_CUSTOM_CONFIG"
    elif [[ ${LINUX_CONFIG:+true} ]] ; then
        LCFG="${LINUX_CONFIG}"
    else
        LCFG="defconfig"
    fi

    linuxConfig $1/linux $LCFG

multiPackage:
    "":
        buildScript: linuxBuild

        multiPackage:
            image:
                inherit: ["linux::image"]
                packageScript: linuxInstallImage $1

            modules:
                inherit: ["linux::modules"]
                packageScript: linuxInstallModules $1

            kmod-dist:
                inherit: ["linux::kmod-dist"]
                packageScript: linuxInstallKmodDist $1

    dtbs:
        inherit: ["linux::dtbs"]
        buildScript: linuxBuildDtbs
        packageScript: linuxInstallDtbs $1

    # This package is only for other recipes that need special kernel headers
    # that are not available in the generic toolchain. Depending on this
    # package should only be needed if you have a custom kernel with
    # added/modified driver headers. It will make your package dependent on
    # this kernel and it's particular configuration!
    headers:
        inherit: ["linux::headers"]
        buildScript: linuxBuildHeaders
        packageScript: linuxInstallHeaders $1

provideVars:
    LINUX_VERSION: "$PKG_VERSION"
